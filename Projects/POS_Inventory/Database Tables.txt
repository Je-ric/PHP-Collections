Database: POS_Inventory

CREATE TABLE Categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category_image VARCHAR(255)
);

CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(15),
    role ENUM('Admin', 'Employee') NOT NULL,
    user_image VARCHAR(255),
    status ENUM('active', 'inactive') NOT NULL DEFAULT 'active'
);

CREATE TABLE Item (
    item_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    brand VARCHAR(255) NOT NULL,
    size VARCHAR(50) NOT NULL,
    color VARCHAR(50) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    investment_price DECIMAL(10, 2) NOT NULL,
    quantity INT NOT NULL,
    category_id INT,
    isActive BOOLEAN NOT NULL,
    is_bogo BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);

CREATE TABLE Colors (
    color_id INT PRIMARY KEY AUTO_INCREMENT,
    color_name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE ItemColors (
    item_id INT,
    color_id INT,
    PRIMARY KEY (item_id, color_id),
    FOREIGN KEY (item_id) REFERENCES Item(item_id) ON DELETE CASCADE,
    FOREIGN KEY (color_id) REFERENCES Colors(color_id) ON DELETE CASCADE
);

CREATE TABLE ItemHistory (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    item_id INT,
    action ENUM('add', 'restore', 'delete', 'restock') NOT NULL,
    user_id INT,
    details TEXT,
    COLUMN timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (item_id) REFERENCES Item(item_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


CREATE TABLE Attendance (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    attendance_date DATE NOT NULL,
    time_in TIME,
    time_out TIME,
    attendance_status ENUM('Present', 'Absent') DEFAULT 'Present',
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Sales (
    sale_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    sale_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    original_total DECIMAL(10, 2),
    discount_amount DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
    total_amount DECIMAL(10, 2) NOT NULL,
    payment DECIMAL(10, 2) NOT NULL,
    changed DECIMAL(10, 2) NOT NULL,
    discount_percentage DECIMAL(5, 2) DEFAULT 0.00,
    discount_id INT NULL,
    sale_status ENUM('Completed', 'Voided') NOT NULL DEFAULT 'Completed',
    payment_method ENUM('Cash', 'E-Wallet', 'Card', 'Other') NOT NULL DEFAULT 'Cash',
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (discount_id) REFERENCES Discounts(id)
);


CREATE TABLE Sale_Items (
    sale_item_id INT AUTO_INCREMENT PRIMARY KEY,
    sale_id INT NOT NULL,
    item_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    discount_percentage DECIMAL(5, 2) DEFAULT 0.00,
    FOREIGN KEY (sale_id) REFERENCES Sales(sale_id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES Item(item_id) ON DELETE CASCADE
);

CREATE TABLE Discounts (
    id INT AUTO_INCREMENT PRIMARY KEY,    
    name VARCHAR(255) NOT NULL,            
    start_date DATE NOT NULL,              
    end_date DATE NOT NULL,                
    promo_status ENUM('Available','Expired','Soon') NOT NULL, 
    promo_type ENUM('None', 'BOGO', 'BOGO Free', 'Holiday Sales') Default None,
    UNIQUE(name, start_date, end_date)
);


CREATE TABLE DiscountPercentages (
    id INT AUTO_INCREMENT PRIMARY KEY,        
    discount_id INT NOT NULL,                  
    percentage DECIMAL(5,2) NOT NULL,          
    FOREIGN KEY (discount_id) REFERENCES Discounts(id) ON DELETE CASCADE,  
    CONSTRAINT unique_percentage UNIQUE (discount_id, percentage)   
);


CREATE TABLE Void_Actions (
    void_id INT AUTO_INCREMENT PRIMARY KEY,
    sale_id INT NOT NULL,
    user_id INT NOT NULL,
    void_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    voided_by INT NOT NULL,
    FOREIGN KEY (sale_id) REFERENCES Sales(sale_id),
    FOREIGN KEY (voided_by) REFERENCES Users(user_id)
);

CREATE TABLE ShopInfo (
    shop_id INT AUTO_INCREMENT PRIMARY KEY,
    shop_name VARCHAR(255) NOT NULL,
    shop_address TEXT NOT NULL,
    shop_contact VARCHAR(50) NOT NULL,
    shop_email VARCHAR(255) 
);

ALTER TABLE Sales
ADD COLUMN original_total DECIMAL(10, 2) AFTER sale_status,
ADD COLUMN discount_amount DECIMAL(10, 2) DEFAULT 0 AFTER original_total,

CREATE TABLE BOGO_Promotions (
    promo_id INT AUTO_INCREMENT PRIMARY KEY,
    item_id INT NOT NULL,
    bogo_item_id INT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    FOREIGN KEY (item_id) REFERENCES Item(item_id),
    FOREIGN KEY (bogo_item_id) REFERENCES Item(item_id)
);



CREATE TABLE Item_Exchanges (
    exchange_id INT AUTO_INCREMENT PRIMARY KEY,
    sale_id INT NOT NULL,
    original_item_id INT NOT NULL,
    exchanged_item_id INT NOT NULL,
    quantity INT NOT NULL,
    exchange_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    user_id INT NOT NULL,
    reason TEXT,
    FOREIGN KEY (sale_id) REFERENCES Sales(sale_id),
    FOREIGN KEY (original_item_id) REFERENCES Item(item_id),
    FOREIGN KEY (exchanged_item_id) REFERENCES Item(item_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
