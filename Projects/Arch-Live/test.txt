<?php
require 'vendor/autoload.php';

use Ratchet\MessageComponentInterface;
use Ratchet\ConnectionInterface;
use Ratchet\Http\HttpServer;
use Ratchet\Server\IoServer;
use Ratchet\WebSocket\WsServer;

// ==============================
// SECTION 1: Typing Server
// ==============================
class TypingServer implements MessageComponentInterface {
    protected $clients;

    public function __construct() {
        $this->clients = new \SplObjectStorage;
    }

    public function onOpen(ConnectionInterface $conn) {
        $this->clients->attach($conn);
        echo "New Typing Connection! ({$conn->resourceId})\n";
    }

    public function onMessage(ConnectionInterface $from, $msg) {
        $data = json_decode($msg, true);

        foreach ($this->clients as $client) {
            if ($client !== $from) { // Avoid sending back to sender
                $client->send(json_encode($data));
            }
        }
    }

    public function onClose(ConnectionInterface $conn) {
        $this->clients->detach($conn);
        echo "Typing Connection {$conn->resourceId} has disconnected\n";
    }

    public function onError(ConnectionInterface $conn, \Exception $e) {
        echo "Typing Error: {$e->getMessage()}\n";
        $conn->close();
    }
}

// ==============================
// SECTION 2: Chat Server
// ==============================
class ChatServer implements MessageComponentInterface {
    protected $clients;

    public function __construct() {
        $this->clients = new \SplObjectStorage;
    }

    public function onOpen(ConnectionInterface $conn) {
        $this->clients->attach($conn);
        echo "New Chat Connection! ({$conn->resourceId})\n";
    }

    public function onMessage(ConnectionInterface $from, $msg) {
        $data = json_decode($msg, true);

        if ($data['type'] === 'message') {
            // Save message to database
            $this->saveMessage($data['research_id'], $data['user_id'], $data['message']);

            // Broadcast message to all clients
            foreach ($this->clients as $client) {
                $client->send(json_encode($data));
            }
        }
    }

    public function onClose(ConnectionInterface $conn) {
        $this->clients->detach($conn);
        echo "Chat Connection {$conn->resourceId} has disconnected\n";
    }

    public function onError(ConnectionInterface $conn, \Exception $e) {
        echo "Chat Error: {$e->getMessage()}\n";
        $conn->close();
    }

    private function saveMessage($research_id, $user_id, $message) {
        include 'db_conn.php';

        $stmt = $conn->prepare("INSERT INTO research_chat (research_id, user_id, message) VALUES (?, ?, ?)");
        $stmt->bind_param("iis", $research_id, $user_id, $message);
        $stmt->execute();
    }
}

// ==============================
// Start the WebSocket Server
// ==============================
$typingServer = new TypingServer();
$chatServer = new ChatServer();

$server = IoServer::factory(
    new HttpServer(
        new WsServer(
            new class($typingServer, $chatServer) implements MessageComponentInterface {
                private $typingServer;
                private $chatServer;

                public function __construct($typingServer, $chatServer) {
                    $this->typingServer = $typingServer;
                    $this->chatServer = $chatServer;
                }

                public function onOpen(ConnectionInterface $conn) {
                    $path = $conn->httpRequest->getUri()->getPath();

                    if ($path === "/typing") {
                        $this->typingServer->onOpen($conn);
                    } elseif ($path === "/chat") {
                        $this->chatServer->onOpen($conn);
                    }
                }

                public function onMessage(ConnectionInterface $from, $msg) {
                    $data = json_decode($msg, true);
                    if (isset($data['type'])) {
                        if ($data['type'] === 'typing') {
                            $this->typingServer->onMessage($from, $msg);
                        } elseif ($data['type'] === 'message') {
                            $this->chatServer->onMessage($from, $msg);
                        }
                    }
                }

                public function onClose(ConnectionInterface $conn) {
                    $this->typingServer->onClose($conn);
                    $this->chatServer->onClose($conn);
                }

                public function onError(ConnectionInterface $conn, \Exception $e) {
                    $this->typingServer->onError($conn, $e);
                    $this->chatServer->onError($conn, $e);
                }
            }
        )
    ),
    8080
);

echo "WebSocket Server running on ws://localhost:8080\n";
$server->run();
